<?xml version="1.0" encoding="utf-8"?>
<project name="project" default="all" basedir="bin">
  <property name="rootpath" value=".."/>
  <property name="rootdir" location="${rootpath}"/>
  <property name="bin" value="."/>
  <property name="level" value="ADVANCED_OPTIMIZATIONS"/>
  <property name="src" value="${rootpath}/src"/>
  <property name="def" value="${rootpath}/define"/>
  <property name="vendor" value="${rootpath}/vendor"/>
  <property name="compiler" value="${vendor}/google-closure-compiler/compiler.jar"/>
  <property name="closure_primitives" value="${rootpath}/closure-primitives/base.js"/>
  <property name="depswriter" value="${rootpath}/closure-primitives/depswriter.py"/>
  <property name="depend" value="${rootpath}/closure-primitives/deps.js"/>
  <property name="export" value="${rootpath}/export"/>
  <property name="externs" value="${rootpath}/externs"/>

  <!-- ビルドの事前準備 -->
  <target name="prebuild" description="ビルドの事前準備を行う">
     <mkdir dir="${bin}"/>
   </target>

  <!-- 依存関係を解決する -->
  <target name="deps">
    <exec executable="python" failonerror="true">
      <arg line="${depswriter}"/>
      <arg line="--root_with_prefix=&quot;.. ..&quot;"/>
      <arg line="--output_file=${depend}"/>
    </exec>

    <pathconvert property="srcfiles" pathsep=" ">
      <map from="${rootdir}" to="--js .."/>
      <fileset dir="${src}" includes="**/*.js"/>
    </pathconvert>
    <echo message="${srcfiles}"/>

    <pathconvert property="exportfiles" pathsep=" ">
      <map from="${rootdir}" to="--js .."/>
      <fileset dir="${export}" includes="*.js"/>
    </pathconvert>
    <echo message="${exportfiles}"/>

    <pathconvert property="closurelibraryfiles" pathsep=" ">
      <map from="${rootdir}" to="--js .."/>
      <fileset dir="${vendor}/google-closure-library/closure/goog" includes="**/*.js"/>
    </pathconvert>
    <echo message="${closurelibraryfiles}"/>
  </target>

  <!-- リリース版のビルド -->
  <target name="release" depends="prebuild, deps" description="リリース版のファイル release.js を作成する">
  <exec dir="." executable="python" failonerror="true">
    <arg line="${vendor}/google-closure-library/closure/bin/build/closurebuilder.py"/>
    <arg line="-c ${vendor}/google-closure-compiler/compiler.jar"/>
    <arg line="-f &quot;--compilation_level=${level}&quot;"/>
    <arg line="-f &quot;--externs=${externs}/googlepickerexterns.js&quot;"/>
    <arg line="-f &quot;--externs=${externs}/gapi.js&quot;"/>
    <arg line="-f &quot;--define=goog.DEBUG=false&quot;"/>
    <arg line="-f &quot;--warning_level=VERBOSE&quot;"/>
    <arg line="-f &quot;--output_wrapper='(function() {%output%}).call(this);'&quot;"/>
    <arg line="-f &quot;--summary_detail_level=3&quot;"/>
    <arg line="-f &quot;--language_in=ECMASCRIPT5_STRICT&quot;"/>
    <arg line="--root=${vendor}/google-closure-library"/>
    <arg line="--root=${vendor}/base64.js"/>
    <arg line="--root=${vendor}/goog.ui.resizable"/>
    <arg line="--root=${src}/app"/>
    <arg line="--namespace=Diceros.Main"/>
    <arg line="-o compiled"/>
    <arg line="--output_file=${bin}/diceros.min.js"/>
  </exec>
  </target>

  <!-- 全て作成 -->
  <target name="all" depends="deps,release"/>

  <!--  削除 -->
  <target name="clean">
    <delete dir="./bin"/>
  </target>

  <!-- リビルド -->
  <target name="rebuild" depends="clean,all"/>
</project>
